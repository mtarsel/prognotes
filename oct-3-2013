#lang racket
;for HW2, we have to implement right-justify

; Scheme (what we have covered):
; -functions or 1st class objects
; -input and output that are functions (compose)
; -streams (infite lists) Delayed evaluation
; -Objects
; -Continuations (back tracking)

(define writeln
  (lambda (stuff)
    (write stuff)
    (newline)))

(define make-stack
  (lambda ()
    (let ((stack '()))
      (letrec
          ((this
            (lambda message ;NOTICE: no paramters - this is a variable number of arguments
              (cond ((null? message) (writeln "No arguments"))
                    (else
                     (case (car message) ; switch statement in scheme
                       ((show) stack)
                       ((empty?) (null? stack))
                       ((error) (write "Error: ") (writeln (cadr message)));DANGEROUS: message might not have any parameters
                       (else (writeln "Unknown Message"))))))))
        this))));this let statement returns a function, the output function

(define make1-stack
  (lambda ()
    (let ((stack '()))
      (letrec
          ((this
            (lambda message 
              (cond ((null? message) (this 'error "No arguments")) ;recursion at the object level
                    (else
                     (case (car message) 
                       ((show) stack)
                       ((empty?) (null? stack))
                       ;((top) (car stack)) ;VERY DANGEROUS - stack can be empty. There might not be a car
                       ((top) (if (not (this 'empty?)) 
                                  (car stack) 
                                  (this 'error "Empty stack")))
                       ((push!)
                        (if (not (null? (cdr message)))
                        (set! stack (cons (cadr message) stack)); set! is a destructive assignment
                        (this 'error "Nothing to push")))
                       
                       ((pop!)
                        (if (not (this 'empty?))
                            (set! stack (cdr stack))
                            (this 'error "Nothin to pop")))
                       
                       ((error)
                        (if (not (null? (cdr message)))
                            (writeln (cadr message))
                            (this 'error "No arguments to error!")))
                       (else (writeln "Unknown Message"))))))))
        this))));this let statement returns a function, the output function
                
;runit: 
; >(define boo (make-stack))
; >(boo)
; >(boo 23)
; >(boo 'show)



; >(define boo (make1-stack))
; >(boo 'error)
; >(boo 'show)
; >(boo 'push! "oatmeal") [same with pop!]
; >(boo 'push! 'raisin)
; >(boo 'top)
; >(boo 'show)

