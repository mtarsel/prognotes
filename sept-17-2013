#lang racket

;quiz 1 Thursday 9/19 in class, open book/notes

(define whos-on-first-loop 
	  (lambda (old-context)
	    (let ((costellos-line (read)));read input from keyboard. assigns input to costellos-line
	      (let ((new-context (get-context costellos-line old-context)));ignore the context
	        (let ((strong-reply (try-strong-cues costellos-line)));gets input sentence from user and figures out if there is an immediate reply
	          (let ((weak-reply (try-weak-cues costellos-line new-context))) ;ignore
	               (cond ((not (null? strong-reply));do we have a strong reply?
	                      (writeln strong-reply)
	                      (whos-on-first-loop (get-context strong-reply new-context)))
	                     ((not (null? weak-reply))
	                      (writeln weak-reply)
			      (whos-on-first-loop (get-context weak-reply new-context)))
	                     ((wants-to-end? costellos-line)
	                      (wrap-it-up))
	                     (else 
	                      (writeln (hedge));hedge=stall
	                      (whos-on-first-loop new-context)))))))))

(define *strong-cues*;defines a list
  '( ( ((the names) (their names));item in a sublist
       ((whos on first whats on second i dont know on third)
        (whats on second whos on first i dont know on third)) );item in a sublist

     ( ((suppose) (lets say) (assume))
       ((okay) (why not) (sure) (it could happen)) )

     ( ((i dont know))
       ((third base) (hes on third)) )
   ))
	
;###HEDGING###
;(list-ref '(a b c d e) 0) => a
;(list-ref '(a b c d e) 1) => b
;(list-ref '(a b c d e) 4) => e

(define list-ref
  (lambda (ls index)
    (cond ((null? ls) '())
          ((zero? index)(car ls)) ;or (= 0 index)
          (else (list-ref (cdr ls) (- index 1))))))
  