#lang racket

;quiz 1 Thursday 9/19 in class, open book/notes

;###HEDGING###
;(list-ref '(a b c d e) 0) => a
;(list-ref '(a b c d e) 1) => b
;(list-ref '(a b c d e) 4) => e

(define list-ref
  (lambda (ls index)
    (cond ((null? ls) '())
          ((zero? index) (car ls))
          (else (list-ref (cdr ls) (- index 1))))))

;(select-any-from-list '((okay) (why not) (if you say so))) => '(why not)
(define select-any-from-list
  (lambda (ls)
    (list-ref ls (random (length ls)))))

;some pseudo-code for assignment 1
;(define hedge
;  (lambda ()
;    (select-any-from-list *hedges*)))

;(define wants-to-end?
;  (lambda (sentence)
;    (exist? sentence
;            '((i quit)
;              (stop it)))))

;(any-good-fragments? '((the names)(their names));list of cues
;                     '(please tell me the names of our players)) => #t ;sentence

(define prefix?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((equal? (car ls1)(car ls2)) (prefix? (cdr ls1)(cdr ls2)))
                                     (else #f))))
(define subsequence?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((prefix? ls1 ls2) #t)
        ( else (subsequence? ls1 (cdr ls2))))))

(define any-good-fragments?
  (lambda (list-of-cues sentence)
    (cond ((null? list-of-cues) #f)
          ((subsequence? (car list-of-cues) sentence) #t)
          (else (any-good-fragments? (cdr list-of-cues) sentence)))))

(define *strong-cues*
	  '( ( ((the names) (their names))
	       ((whos on first whats on second i dont know on third)
 	        (whats on second whos on first i dont know on third)) )

	     ( ((suppose) (lets say) (assume))
	       ((okay) (why not) (sure) (it could happen)) )

	     ( ((i dont know))
	       ((third base) (hes on third)) )
	   ))

;(define boo (car *strong-cues*))
;boo
;(car boo)
;(cadr boo) cadr is the car of the cdr

(define cue-part
  (lambda (pair)
    (car pair)))

(define response-part
  (lambda (pair)
    (__________ pair)))
    
;TODO   
(define try-strong-cues
  (lambda (sentence)
    (define helper
      (lambda (list-of-pairs)
        (cond ((null? list-of-pairs) '())
              ((any-good-fragments? (que-part (car list-of-pairs)) sentence)
               (select-any-from-list (response-part(car list-of-pairs)))
               (else (helper (cdr list-of-pairs))))))
        (helper *strong-cues*))))
 

         