#lang racket

;quiz 1 Thursday 9/19 in class, open book/notes

;###HEDGING###
;(list-ref '(a b c d e) 0) => a
;(list-ref '(a b c d e) 1) => b
;(list-ref '(a b c d e) 4) => e

(define list-ref
  (lambda (ls index)
    (cond ((null? ls) '())
          ((zero? index) (car ls))
          (else (list-ref (cdr ls) (- index 1))))))

;(select-any-from-list '((okay) (why not) (if you say so))) => '(why not)
(define select-any-from-list
  (lambda (ls)
    (list-ref ls (random (length ls)))))

;some pseudo-code for assignment 1
;(define hedge
;  (lambda ()
;    (select-any-from-list *hedges*)))

;(define wants-to-end?
;  (lambda (sentence)
;    (exist? sentence
;            '((i quit)
;              (stop it)))))

;(any-good-fragments? '((the names)(their names));list of cues
;                     '(please tell me the names of our players)) => #t ;sentence

(define prefix?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((equal? (car ls1)(car ls2)) (prefix? (cdr ls1)(cdr ls2)))
                                     (else #f))))
(define subsequence?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((prefix? ls1 ls2) #t)
        ( else (subsequence? ls1 (cdr ls2))))))

(define any-good-fragments?
  (lambda (list-of-cues sentence)
    (cond ((null? list-of-cues) #f)
          ((subsequence? (car list-of-cues) sentence) #t)
          (else (any-good-fragments? (cdr list-of-cues) sentence)))))

(define *strong-cues*
	  '( ( ((the names) (their names))
	       ((whos on first whats on second i dont know on third)
 	        (whats on second whos on first i dont know on third)) )

	     ( ((suppose) (lets say) (assume))
	       ((okay) (why not) (sure) (it could happen)) )

	     ( ((i dont know))
	       ((third base) (hes on third)) )
	   ))

;(define boo (car *strong-cues*))
;boo
;(car boo)
;(cadr boo) cadr is the car of the cdr

(define cue-part
  (lambda (pair)
    (car pair)))

(define response-part
  (lambda (pair)
    (cadr pair)))
    

(define try-strong-cues
  (lambda (sentence)
    (define helper
      (lambda (list-of-pairs)
        (cond ((null? list-of-pairs) '())
              ((any-good-fragments? (que-part (car list-of-pairs)) sentence)
               (select-any-from-list (response-part(car list-of-pairs)))
               (else (helper (cdr list-of-pairs))))))
        (helper *strong-cues*))))

;#### SEPTEMBER 19, 2013 NOTES ####

	(define *hedges*
	  '((its like im telling you)
	    (now calm down)
	    (take it easy)
	    (its elementary lou)
	    (im trying to tell you)
	    (but you asked)))
	
(define *strong-cues*
  '( ( ((the names) (their names))
       ((whos on first whats on second i dont know on third)
	        (whats on second whos on first i dont know on third)) )
	     ( ((suppose) (lets say) (assume))
       ((okay) (why not) (sure) (it could happen)) )
	     ( ((i dont know))
       ((third base) (hes on third)) )
   ))
        
 
(define whos-on-first-loop 
  (lambda (old-context)
    (let ((costellos-line (read)))
      (let ((new-context (get-context costellos-line old-context)))
        (let ((strong-reply (try-strong-cues costellos-line)))
          (let ((weak-reply (try-weak-cues costellos-line new-context))) 
               (cond ((not (null? strong-reply))
                      (writeln strong-reply)
                      (whos-on-first-loop (get-context strong-reply new-context)))
                     ((not (null? weak-reply))
                      (writeln weak-reply)
		      (whos-on-first-loop (get-context weak-reply new-context)))
                     ((wants-to-end? costellos-line)
                      (wrap-it-up))
                     (else 
                      (writeln (hedge))
                      (whos-on-first-loop new-context)))))))))

(define whos
  (lambda ()
    (whos-on-first-loop '())))

(define try-strong-cues
  (lambda (sentence)
    '()))

(define wants-to-end?
  (lambda (sentence)
    (equal? sentence '(i quit))))

;(define wrap-it-up
;  (lambda

(define hedge
  (lambda ()
    (select-any-from-list *hedges*)))

(define get-context
  (lambda (sentence old-context)
    '()))

;(define try-weak-cues
;  (lambda (sentence 
           
       
    

         