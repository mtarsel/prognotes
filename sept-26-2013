#lang racket
(require racket/stream)
;(x,y)
;1/1 -> (1,1) 
;(1,3) (2,3) (3,3) ...
;(1,2) (2,2) (3,2) ...
;(1,1) -> (2,1) (3,1) ...

;road map (dovetailing):
;(1,1) -> (2,1) -> (1,2) -> (1,3) -> (2,2)->(3,1)-> ... -> (3,2) -> (2,3) -> (1,4) -> (1,5) -> ... -> (3,3)

;(a,b) ->? (a',b')
;write a filter on this stream to remove duplicates. Find fractions that are in simplest form (write a filter).



; file->list
; reads a file of characters into a list
;
(define file->list
  (lambda (filename) 
    (let ((input-port (open-input-file filename))) 
      (letrec 
	((build-input-list 
	   (lambda () 
	     (let ((current-char (read-char input-port))) 
	       (if (eof-object? current-char) 
		 (begin (close-input-port input-port) 
			'()) 
		 (cons current-char (build-input-list))))))) 
	(build-input-list)))))

;To run it: (define boo (file->list "/home/mick/scheme/prognotes/plain.txt"))
; boo

;file->stream
(define file->stream
  (lambda (filename)
    (let ((in-port (open-input-file filename)))
      (letrec
        ((build-input-stream
          (lambda ()
            (let ((ch (read-char in-port)))
              (if (eof-object? ch)
                  (begin
                    (close-input-port in-port)
                    (empty-stream))
                  (stream-cons ch (build-input-stream)))))))
        (build-input-stream)))))

; my-stream->list
; constructs a list of the first n items from a stream
;
(define my-stream->list
  (lambda (stream n)
	  (cond ((stream-empty? stream) '())
		((zero? n) '())
		(else (cons (stream-first stream)
			    (my-stream->list (stream-rest stream) (- n 1)))))))



; list->file
; writes a list of characters to a file
;
(define list->file
  (lambda (filename ls)
    (let ((output-port (open-output-file filename #:exists 'replace)));definition of a flag
      (letrec
          ((build-output-file
            (lambda (ls)
              (cond ((null? ls)
                     (close-output-port output-port))
                    (else 
                     (write-char (car ls) output-port)
                     (build-output-file (cdr ls)))))))
        (build-output-file ls)))))

(define stream->file
  (lambda (filename stream)
  (let ((output-port (open-output-file filename #:exists 'replace)));definition of a flag
      (letrec
          ((build-output-file
            (lambda (stream)
              (cond ((stream-empty? stream)
                     (close-output-port output-port))
                    (else 
                     (write-char (stream-first stream) output-port)
                     (build-output-file (stream-rest stream)))))))
        (build-output-file stream)))))

(define remove-newlines
  (lambda (stream)
    (stream-map (lambda (x) (if (char=? x #\newline) #\space x)) stream)))


;To run: 
;(list->file "/home/mick/scheme/prognotes/boo.txt" boo) 
;(define foo (remove-newlines boo))
;(my-file->list boo 10)
;(stream->file "foo.txt" foo)

